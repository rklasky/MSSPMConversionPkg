# Keep only the columns MSSPM will need
msspmColumns <- select(simCatchData, year, Name, value)
# Convert rows into columns
msspmCatch <- spread(wide1, Name, value)
# Script to convert Atlantic sim index file to MSSPM catch file
# Read in Atlantis table
inputDataFrame <- simCatchIndex
# Get only the catch rows (i.e., no cv) and years > 54
simCatchData <- subset(inputDataFrame,year>54 & variable=='catch')
# Keep only the columns MSSPM will need
msspmColumns <- select(simCatchData, year, Name, value)
# Convert rows into columns
msspmCatch <- spread(wide1, Name, value)
# Write out final table
outputFile <- '/home/rklasky/test/test.csv'
write_csv(msspmCatch,outputFile)
remotes::install_github("NOAA-EDAB/ms-keyrun")
convertAtlantisToMSSPM <- function(inputDataFrame,outputFile) {
# Get only the catch rows (i.e., no cv) and years > 54
simCatchData <- subset(inputDataFrame,year>54 & variable=='catch')
# Keep only the columns MSSPM will need
msspmColumns <- select(simCatchData, year, Name, value)
# Convert rows into columns
msspmCatch <- spread(wide1, Name, value)
# Write out final table
write_csv(msspmCatch,outputFile)
}
inputDataFrame <- simCatchIndex
outputFile     <- '/home/rklasky/test/test.csv'
outputFile     <- '/home/rklasky/test/test1.csv'
convertAtlantisToMSSPM(inputDataFrame,outputFile)
###### this is a test ######
# *this* is a comments
###################################################################
#
# This function takes the input Atlantis data frame, converts it
# to an MSSPM formatted data frame, and writes it out to the passed
# CSV file.
#
###################################################################
convertAtlantisToMSSPM <- function(inputDataFrame,outputFile) {
# Get only the catch rows (i.e., no cv) and years > 54
simCatchData <- subset(inputDataFrame,year>54 & variable=='catch')
# Keep only the columns MSSPM will need
msspmColumns <- select(simCatchData, year, Name, value)
# Convert rows into columns
msspmCatch <- spread(wide1, Name, value)
# Write out final table
write_csv(msspmCatch,outputFile)
}
inputDataFrame <- simCatchIndex
outputFile     <- '/home/rklasky/test/test2.csv'
convertAtlantisToMSSPM(inputDataFrame,outputFile)
View(simCatchIndex)
convertAtlantisToMSSPM <- function(inputDataFrame,startYear,outputFile) {
# Get only the catch rows (i.e., no cv) and years >= the startYear
simCatchData <- subset(inputDataFrame,year>=startYear & variable=='catch')
# Keep only the columns MSSPM will need
msspmColumns <- select(simCatchData, year, Name, value)
# Convert rows into columns
msspmCatch <- spread(wide1, Name, value)
# Write out final table
write_csv(msspmCatch,outputFile)
}
inputDataFrame <- simCatchIndex
outputFile     <- '/home/rklasky/test/test.csv'
convertAtlantisToMSSPM(inputDataFrame,55,outputFile)
View(simCatchIndex)
convertAtlantisToMSSPM <- function(inputDataFrame,startYear,outputFile) {
# Get only the catch rows (i.e., no cv) and years >= the startYear
simCatchData <- subset(inputDataFrame,year>=startYear & variable=='catch')
# Keep only the columns MSSPM will need
msspmColumns <- select(simCatchData, year, Name, value)
# Convert rows into columns
msspmCatch <- spread(msspmColumns, Name, value)
# Write out final table
write_csv(msspmCatch,outputFile)
}
convertAtlantisToMSSPM <- function(inputDataFrame,startYear,outputFile) {
# Get only the catch rows (i.e., no cv) and years >= the startYear
simCatchData <- subset(inputDataFrame,year>=startYear & variable=='catch')
# Keep only the columns MSSPM will need
msspmColumns <- select(simCatchData, year, Name, value)
# Convert rows into columns
msspmCatch <- spread(msspmColumns, Name, value)
# Write out final table
write_csv(msspmCatch,outputFile)
}
inputDataFrame <- simCatchIndex
outputFile     <- '/home/rklasky/test/test1.csv'
convertAtlantisToMSSPM(inputDataFrame,55,outputFile)
convertAtlantisToMSSPM <- function(inputDataFrame,startYear,outputFile) {
# Get only the catch rows (i.e., no cv) and years >= the startYear
simCatchData <- subset(inputDataFrame, year>=startYear & variable=='catch')
# Keep only the columns MSSPM will need
msspmColumns <- select(simCatchData, year, Name, value)
# Convert rows into columns
msspmCatch <- spread(msspmColumns, Name, value)
# Write out final table
write_csv(msspmCatch,outputFile)
}
inputDataFrame <- simCatchIndex
outputFile     <- '/home/rklasky/test/test4.csv'
convertAtlantisToMSSPM(inputDataFrame,55,outputFile)
View(wide2)
destroy(wide2)
wide2.destroy()
rm(wide2)
rm(wide1)
rm(wide)
rm(test)
rm(testBlue_whiting)
rm(species)
View(fleets)
View(inputDataFrame)
View(long3)
rm(long3)
View(longdata1)
rm(longdata1)
View(msspmCatch)
View(msspmColumns)
View(inputDataFrame)
rm(inputDataFrame)
rm(msspmCatch)
rm(msspmColumns)
View(mtcars)
rm(mtcars)
convertAtlantisToMSSPM <- function(inputDataFrame,startYear,outputFile) {
# Get only the catch rows (i.e., no cv) and years >= the startYear
simCatchData <- subset(inputDataFrame, year>=startYear & variable=='catch')
# Keep only the columns MSSPM will need
msspmColumns <- select(simCatchData, year, Name, value)
# Convert rows into columns
msspmCatch <- spread(msspmColumns, Name, value)
# Write out final table
write_csv(msspmCatch,outputFile)
}
inputDataFrame <- simCatchIndex
outputFile     <- '/home/rklasky/test/test4.csv'
convertAtlantisToMSSPM(inputDataFrame,55,outputFile)
View(simCatchData)
View(simCatchIndex)
View(simCatchData)
View(simCatchIndex)
View(simCatchData)
View(simCatchIndex)
View(simCatchData)
View(simSurveyIndex)
View(surveyIndexA4)
View(simSurveyIndex)
View(simCatchIndex)
View(simCatchData)
View(inputDataFrame)
View(fleets)
View(surveyIndexA4)
View(surveyIndexA4All)
View(surveyIndexA4)
View(surveyIndexA4All)
View(surveyIndexA4)
View(surveyIndexA4All)
View(surveyIndexA4)
View(surveyIndexA4)
View(surveyIndexA4)
distinct(surveyIndexA4,SVSPP)
distinct(surveyIndexA4All,SVSPP)
distinct(surveyIndexA4,SVSPP)
View(fleets)
View(mskeyrun::focalSpecies)
focalSpecies <- mskeyrun::focalSpecies
View(focalSpecies)
subset(surveyIndexA4,SEASON=='FALL'&variable=='strat.abund')
subset(surveyIndexA4,SEASON=='FALL'&variable=='strat.biomass')
fallData <- subset(surveyIndexA4,SEASON=='FALL'&variable=='strat.biomass')
select(fallData, year, SVSPP, value)
select(fallData, YEAR, SVSPP, value)
fallDataColumns <- select(fallData, YEAR, SVSPP, value)
View(fallDataColumns)
View(fallData)
fallDataColumns <- select(fallData, YEAR, SVSPP, value)
View(fallDataColumns)
select(fallData, YEAR, SVSPP, value)
x <- select(fallData, YEAR, SVSPP, value)
x
View(x)
rm(x)
fallData
select(fallData, YEAR, SVSPP, value)
View(fallDataColumns)
surveyIndexA4
x1 <- subset(surveyIndexA4, SEASON=='FALL' & variable=='strat.biomass')
View(x1)
x1
select(x1, YEAR, SVSPP, value)
x2 <- select(x1, YEAR, SVSPP, value)
x2
View(x1)
View(x2)
View(x2)
View(x2)
x2 <- as.data.frame(select(x1, YEAR, SVSPP, value))
View(x2)
msspmObsBM <- spread(x2, SVSPP, value)
View(msspmObsBM)
View(surveyIndexA4)
View(msspmObsBM)
rm(fallDataColumns)
View(fallData)
fallDataColumns <- as.data.frame(select(fallData, YEAR, SVSPP, value))  # Why do I need the as.data.frame here?
fallDataColumns <- as.data.frame(select(fallData, YEAR, SVSPP, value))
View(fallDataColumns)
View(fallDataColumns)
View(focalSpecies)
focalSpecies
group_by[SVSPP]
distinct(focalSpecies,SVSPP,modelName)
SVSPPLookupTable <= distinct(focalSpecies,SVSPP,modelName)
SVSPPLookupTable <- distinct(focalSpecies,SVSPP,modelName)
View(SVSPPLookupTable)
View(SVSPPLookupTable)
View(fallDataColumns)
View(SVSPPLookupTable)
fallDataColumns$SVSPP <- with(SVSPPLookupTable, modelName[match(fallDataColumns$SVSPP,SVSPP)])
View(fallDataColumns)
rename(fallDataColumns,SVSPP=Name)
names(fallDataColumns)[names(fallDataColumns) == "SVSPP"] <- "Name"
fallData <- subset(surveyIndexA4,SEASON=='FALL'&variable=='strat.biomass')
fallData
fallDataColumns$SVSPP <- with(SVSPPLookupTable, modelName[match(fallDataColumns$SVSPP,SVSPP)])
msspmObsBM <- spread(fallDataColumns, Name, value) # There is missing data, what to do? (i.e., Fall, SVSPP=32, 1979)
View(msspmObsBM)
allDataColumns <- as.data.frame(select(fallData, YEAR, SVSPP, value))
View(allDataColumns)
allDataColumns <- select(fallData, YEAR, SVSPP, value, drop=F)
allDataColumns <- select(fallData, YEAR, SVSPP, value, drop==F)
focalSpecies
surveyIndexA4
rm(SVSPPLookupTable)
rm(x1)
rm(x2)
rm(allDataColumns)
rm(fallData)
rm(fallDataColumns)
rm(msspmObsBM)
rm(inputDataFrame)
SVSPPLookupTable <- distinct(focalSpecies, SVSPP, modelName)
SVSPPLookupTable <- distinct(focalSpecies, SVSPP, modelName)
SVSPPLookupTable <- distinct(focalSpecies, SVSPP, modelName)
View(SVSPPLookupTable)
rm(SVSPPLookupTable)
fallData <- subset(surveyIndexA4,SEASON=='FALL'&variable=='strat.biomass')
View(fallData)
fallDataColumns <- as.data.frame(select(fallData, YEAR, SVSPP, value))
View(fallDataColumns)
fallDataColumns$SVSPP <- with(focalSpecies, modelName[match(fallDataColumns$SVSPP,SVSPP)])
names(fallDataColumns)[names(fallDataColumns) == "SVSPP"] <- "Name"
msspmObsBM <- spread(fallDataColumns, Name, value)
View(msspmObsBM)
convertAtlantisObsBMToMSSPM <- function(speciesMappingDataFrame,observedBMDataFrame,season,outputFile) {
# Grab the rows for the desired season and data type using the desired survey index data frame
seasonData <- subset(observedBMDataFrame, SEASON==season & variable=='strat.biomass')
# Grab just the columns needed for MSSPM
seasonDataColumns <- as.data.frame(select(seasonData, YEAR, SVSPP, value))  # Why do I need the as.data.frame here?
# Using the SVSPP-Name lookup data frame, replace the numeric SVSPP values with their modelName values
seasonDataColumns$SVSPP <- with(speciesMappingDataFrame, modelName[match(seasonDataColumns$SVSPP,SVSPP)])
# Rename the column header from SVSPP to Name
names(seasonDataColumns)[names(seasonDataColumns) == "SVSPP"] <- "Name"
# Create columns as species
msspmObsBM <- spread(seasonDataColumns, Name, value) # There is missing data, what to do? (i.e., Fall, SVSPP=32, 1979)
}
convertAtlantisObsBMToMSSPM <- function(speciesMappingDataFrame,observedBMDataFrame,season,outputFile) {
# Grab the rows for the desired season and data type using the desired survey index data frame
seasonData <- subset(observedBMDataFrame, SEASON==season & variable=='strat.biomass')
# Grab just the columns needed for MSSPM
seasonDataColumns <- as.data.frame(select(seasonData, YEAR, SVSPP, value))  # Why do I need the as.data.frame here?
# Using the SVSPP-Name lookup data frame, replace the numeric SVSPP values with their modelName values
seasonDataColumns$SVSPP <- with(speciesMappingDataFrame, modelName[match(seasonDataColumns$SVSPP,SVSPP)])
# Rename the column header from SVSPP to Name
names(seasonDataColumns)[names(seasonDataColumns) == "SVSPP"] <- "Name"
# Create columns as species
msspmObsBM <- spread(seasonDataColumns, Name, value)
# There is missing data, what to do? (i.e., Fall, SVSPP=32, 1979)
}
seasonData <- subset(observedBMDataFrame, SEASON==season & variable=='strat.biomass')
rm(msspmObsBM)
rm(fallData)
rm(fallDataColumns)
speciesMappingDataFrame <- focalSpecies # needed to map SVSPP value to modelName
View(speciesMappingDataFrame)
convertAtlantisObsBMToMSSPM <- function(speciesMappingDataFrame,observedBMDataFrame,surveySeason,outputFile) {
# Grab the rows for the desired season and data type using the desired survey index data frame
seasonData <- subset(observedBMDataFrame, SEASON==surveySeason & variable=='strat.biomass')
# Grab just the columns needed for MSSPM
seasonDataColumns <- as.data.frame(select(seasonData, YEAR, SVSPP, value))  # Why do I need the as.data.frame here?
# Using the SVSPP-Name lookup data frame, replace the numeric SVSPP values with their modelName values
seasonDataColumns$SVSPP <- with(speciesMappingDataFrame, modelName[match(seasonDataColumns$SVSPP,SVSPP)])
# Rename the column header from SVSPP to Name
names(seasonDataColumns)[names(seasonDataColumns) == "SVSPP"] <- "Name"
# Create columns as species
msspmObsBM <- spread(seasonDataColumns, Name, value)
# There is missing data, what to do? (i.e., Fall, SVSPP=32, 1979)
# Write out final table
write_csv(msspmObsBM,outputFile)
}
rm(speciesMappingDataFrame)
convertAtlantisObsBMtoMSSPM <- function(speciesMappingDataFrame,observedBMDataFrame,surveySeason,outputFile) {
# Grab the rows for the desired season and data type using the desired survey index data frame
seasonData <- subset(observedBMDataFrame, SEASON==surveySeason & variable=='strat.biomass')
# Grab just the columns needed for MSSPM
seasonDataColumns <- as.data.frame(select(seasonData, YEAR, SVSPP, value))  # Why do I need the as.data.frame here?
# Using the SVSPP-Name lookup data frame, replace the numeric SVSPP values with their modelName values
seasonDataColumns$SVSPP <- with(speciesMappingDataFrame, modelName[match(seasonDataColumns$SVSPP,SVSPP)])
# Rename the column header from SVSPP to Name
names(seasonDataColumns)[names(seasonDataColumns) == "SVSPP"] <- "Name"
# Create columns as species
msspmObsBM <- spread(seasonDataColumns, Name, value)
# There is missing data, what to do? (i.e., Fall, SVSPP=32, 1979)
# Write out final table
write_csv(msspmObsBM,outputFile)
}
convertAtlantisObsBMtoMSSPM <- function(speciesMappingDataFrame,observedBMDataFrame,surveySeason,outputFile) {
# Grab the rows for the desired season and data type using the desired survey index data frame
seasonData <- subset(observedBMDataFrame, SEASON==surveySeason & variable=='strat.biomass')
# Grab just the columns needed for MSSPM
seasonDataColumns <- as.data.frame(select(seasonData, YEAR, SVSPP, value))
# Q1. Why do I need the as.data.frame here?
# Using the SVSPP-Name lookup data frame, replace the numeric SVSPP values with their modelName values
seasonDataColumns$SVSPP <- with(speciesMappingDataFrame, modelName[match(seasonDataColumns$SVSPP,SVSPP)])
# Rename the column header from SVSPP to Name
names(seasonDataColumns)[names(seasonDataColumns) == "SVSPP"] <- "Name"
# Create columns as species
msspmObsBM <- spread(seasonDataColumns, Name, value)
# Q2. There is missing data, what to do? (i.e., Fall, SVSPP=32, 1979)
# Write out final table
write_csv(msspmObsBM,outputFile)
}
speciesMappingDataFrame <- focalSpecies # needed to map SVSPP value to modelName
observedBMDataFrame <- surveyIndexA4
surveySeason <- 'FALL'
outputFile <- '/home/rklasky/test/testObsBM.csv'
convertAtlantisObsBMtoMSSPM(speciesMappingDataFrame,observedBMDataFrame,surveySeason,outputFile)
convertAtlantisObsBMtoMSSPM <- function(speciesMappingDataFrame,observedBMDataFrame,surveySeason,outputFile) {
# Grab the rows for the desired season and data type using the desired survey index data frame
seasonData <- subset(observedBMDataFrame, SEASON==surveySeason & variable=='strat.biomass')
# Grab just the columns needed for MSSPM
seasonDataColumns <- as.data.frame(select(seasonData, YEAR, SVSPP, value))
# Q1. Why do I need the as.data.frame here?
# Using the SVSPP-Name lookup data frame, replace the numeric SVSPP values with their modelName values
seasonDataColumns$SVSPP <- with(speciesMappingDataFrame, modelName[match(seasonDataColumns$SVSPP,SVSPP)])
# Rename the column header from SVSPP to Name
names(seasonDataColumns)[names(seasonDataColumns) == "SVSPP"] <- "Name"
# Create columns as species
msspmObsBM <- spread(seasonDataColumns, Name, value)
# Q2. There is missing data, what to do? (i.e., Fall, SVSPP=32, 1979)
# Write out final table
write_csv(msspmObsBM,outputFile)
}
speciesMappingDataFrame <- focalSpecies # needed to map SVSPP value to modelName
observedBMDataFrame <- surveyIndexA4
surveySeason <- 'FALL'
outputFile <- '/home/rklasky/test/testObsBM.csv'
convertAtlantisObsBMtoMSSPM(speciesMappingDataFrame,observedBMDataFrame,surveySeason,outputFile)
View(simSurveyIndex)
View(surveyIndexA4)
speciesMappingDataFrame <- focalSpecies # needed to map SVSPP value to modelName
observedBMDataFrame <- surveyIndexA4
surveySeason <- 'FALL' # Use 'FALL' or "SPRING"
outputFile <- '/home/rklasky/test/testObsBM.csv'
convertAtlantisObsBMtoMSSPM(speciesMappingDataFrame,observedBMDataFrame,surveySeason,outputFile)
outputFile <- '/home/rklasky/test/testObsBM_' + surveySeason + '.csv'
outputFile <- '/home/rklasky/test/testObsBM_' + paste0(surveySeason,'.csv')
outputFile <- '/home/rklasky/test/testObsBM_' + paste0(c(surveySeason,'.csv'))
outputFile <- paste('/home/rklasky/test/testObsBM_',surveySeason) + '.csv'
outputFile <- paste('/home/rklasky/test/testObsBM_',surveySeason,'.csv'
outputFile <- paste('/home/rklasky/test/testObsBM_',surveySeason,'.csv')
paste('a',1)
paste('a',paste(1," end"))
paste('a',1) + " the end"
paste('a',1,'dfdfd')
outputFile <- paste('/home/rklasky/test/testObsBM_',surveySeason,'.csv',collapse="")
outputFile
outputFile <- paste('/home/rklasky/test/testObsBM_',surveySeason,'.csv',collapse=" ")
outputFile
outputFile <- paste('/home/rklasky/test/testObsBM_',surveySeason,'.csv',sep="")
outputFile
convertAtlantisObsBMtoMSSPM <- function(speciesMappingDataFrame,observedBMDataFrame,surveySeason,outputFile) {
# Grab the rows for the desired season and data type using the desired survey index data frame
seasonData <- subset(observedBMDataFrame, SEASON==surveySeason & variable=='strat.biomass')
# Grab just the columns needed for MSSPM
seasonDataColumns <- as.data.frame(select(seasonData, YEAR, SVSPP, value))
# Q1. Why do I need the as.data.frame here?
# Using the SVSPP-Name lookup data frame, replace the numeric SVSPP values with their modelName values
seasonDataColumns$SVSPP <- with(speciesMappingDataFrame, modelName[match(seasonDataColumns$SVSPP,SVSPP)])
# Rename the column header from SVSPP to Name
names(seasonDataColumns)[names(seasonDataColumns) == "SVSPP"] <- "Name"
# Create columns as species
msspmObsBM <- spread(seasonDataColumns, Name, value)
# Q2. There is missing data, what to do? (i.e., Fall, SVSPP=32, 1979)
# Write out final table
write_csv(msspmObsBM,outputFile)
}
speciesMappingDataFrame <- focalSpecies # needed to map SVSPP value to modelName
observedBMDataFrame <- surveyIndexA4
surveySeason <- 'FALL' # Use 'FALL' or "SPRING"
outputFile <- paste('/home/rklasky/test/testObsBM_',surveySeason,'.csv',sep="")
convertAtlantisObsBMtoMSSPM(speciesMappingDataFrame,observedBMDataFrame,surveySeason,outputFile)
speciesMappingDataFrame <- focalSpecies # needed to map SVSPP value to modelName
observedBMDataFrame <- surveyIndexA4
surveySeason <- 'SPRING' # Use 'FALL' or "SPRING"
outputFile <- paste('/home/rklasky/test/testObsBM_',surveySeason,'.csv',sep="")
convertAtlantisObsBMtoMSSPM(speciesMappingDataFrame,observedBMDataFrame,surveySeason,outputFile)
source('~/rScripts/Atlantis_ObsBM_to_MSSPM.R')
source('~/rScripts/Atlantis_Catch_to_MSSPM.R')
convertAtlantisCatchToMSSPM <- function(inputDataFrame,startYear,outputFile) {
# Get only the catch rows (i.e., no cv) and years >= the startYear
simCatchData <- subset(inputDataFrame,year>=startYear & variable=='catch')
# Keep only the columns MSSPM will need
msspmColumns <- select(simCatchData, year, Name, value)
# Convert rows into columns
msspmCatch <- spread(wide1, Name, value)
# Write out final table
write_csv(msspmCatch,outputFile)
}
inputDataFrame <- simCatchIndex
outputFile     <- '/home/rklasky/test/testCatch.csv'
convertAtlantisCatchToMSSPM(inputDataFrame,55,outputFile)
convertAtlantisCatchToMSSPM <- function(inputDataFrame,startYear,outputFile) {
# Get only the catch rows (i.e., no cv) and years >= the startYear
simCatchData <- subset(inputDataFrame,year>=startYear & variable=='catch')
# Keep only the columns MSSPM will need
msspmColumns <- select(simCatchData, year, Name, value)
# Convert rows into columns
msspmCatch <- spread(msspmColumns, Name, value)
# Write out final table
write_csv(msspmCatch,outputFile)
}
inputDataFrame <- simCatchIndex
outputFile     <- '/home/rklasky/test/testCatch.csv'
convertAtlantisCatchToMSSPM(inputDataFrame,55,outputFile)
convertAtlantisObsBMtoMSSPM <- function(speciesMappingDataFrame,observedBMDataFrame,surveySeason,outputFile) {
# Grab the rows for the desired season and data type using the desired survey index data frame
seasonData <- subset(observedBMDataFrame, SEASON==surveySeason & variable=='strat.biomass')
# Grab just the columns needed for MSSPM
seasonDataColumns <- as.data.frame(select(seasonData, YEAR, SVSPP, value))
# Q1. Why do I need the as.data.frame here?
# Using the SVSPP-Name lookup data frame, replace the numeric SVSPP values with their modelName values
seasonDataColumns$SVSPP <- with(speciesMappingDataFrame, modelName[match(seasonDataColumns$SVSPP,SVSPP)])
# Rename the column header from SVSPP to Name
names(seasonDataColumns)[names(seasonDataColumns) == "SVSPP"] <- "Name"
# Create columns as species
msspmObsBM <- spread(seasonDataColumns, Name, value)
# Q2. There is missing data, what to do? (i.e., Fall, SVSPP=32, 1979)
# Write out final table
write_csv(msspmObsBM,outputFile)
}
speciesMappingDataFrame <- focalSpecies # needed to map SVSPP value to modelName
observedBMDataFrame <- surveyIndexA4
surveySeason <- 'SPRING' # Use 'FALL' or "SPRING"
outputFile <- paste('/home/rklasky/test/testObsBM_',surveySeason,'.csv',sep="")
convertAtlantisObsBMtoMSSPM(speciesMappingDataFrame,observedBMDataFrame,surveySeason,outputFile)
install.packages("devtools")
install.packages("devtools")
install.packages("roxygen2")
devtools::create("MSSPMConversionPkg")
devtools::create("/home/rklasky/rScripts/MSSPMConversionPkg")
setwd("/home/rklasky/rScripts")
library(devtools)
library(usethis)
library(devtools)
load_all(".")
setwd("/home/rklasky/rScripts/MSSPMConversionPkg")
library(devtools)
load_all(".")
library(devtools)
library(usethis)
library(devtools)
load_all(".")
remotes::install_github("NOAA-EDAB/ms-keyrun")
remotes::install_github("NOAA-EDAB/ms-keyrun",force=TRUE)
mskeyrun::simCatchIndex
simCatchIndex <- mskeyrun::simCatchIndex
surveyIndexA4 <- mskeyrun::surveyIndexA4
focalSpecies <- mskeyrun::focalSpecies
View(surveyIndexA4)
library(devtools)
setwd("/home/rklasky/rScripts/MSSPMConversionPkg")
load_all(".")
load_all(".")
inputDataFrame <- mskeyrun::simCatchIndex
outputFile     <- '/home/rklasky/test/testCatch.csv'
convertAtlantisCatchToMSSPM(inputDataFrame,55,outputFile)
library(roxygen2)
roxygenise();
help(MSSPMConversionPkg::convertAtlantisCatchToMSSPM)
roxygenise();
help(MSSPMConversionPkg::convertAtlantisCatchToMSSPM)
roxygenise();
help(MSSPMConversionPkg::convertAtlantisCatchToMSSPM)
roxygenise();
help(MSSPMConversionPkg::convertAtlantisCatchToMSSPM)
roxygenise();
help(MSSPMConversionPkg::convertAtlantisObsBMToMSSPM)
help(MSSPMConversionPkg::convertAtlantisObsBMtoMSSPM)
roxygenise();
help(MSSPMConversionPkg::convertAtlantisObsBMtoMSSPM)
library(MSSPMConversionPkg)
?convertColor
install.packages(MSSPMConversionPkg)
install('/home/rklasky/rScripts/MSSPMConversionPkg/')
!convertAtlantisCatchToMSSPM()
roxygenise();
load_all('.')
library(MSSPMConversionPkg)
